package com.capsico.analyzer.old;

import java.io.IOException;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.capsico.analyzer.bean.Column;
import com.capsico.analyzer.bean.DBStatus;
import com.capsico.analyzer.bean.Database;
import com.capsico.analyzer.bean.Schema;
import com.capsico.analyzer.bean.Table;
import com.capsico.analyzer.helper.FileHelper;

import tilda.db.Connection;
import tilda.utils.DurationUtil;

public class DBProcessor
  {
    protected static final Logger LOG = LogManager.getLogger(DBProcessor.class.getName());

    public static void process(Connection C, FileHelper FH, Database DB, DBStatus DBS)
    throws Exception
      {
        LOG.debug("Start processing the db schemas.");
        LOG.debug("Number of db schemas : " + DB._SchemaList.size());

        long T0 = System.nanoTime();

        for (Schema S : DB._SchemaList)
          {
            int schemaFilePart = 1;
            if (S.getCompleted() == false)
              {
                long SchemaT0 = System.nanoTime();
                if (S.getStarted() == false)
                  {
                    StringBuilder Str = BuildSchemaFileStart(FH, S, schemaFilePart);
                    FH.UpdateResultsFile(S.getFileName(schemaFilePart), Str.toString(), false, "Starting the Schema File");
                    DBS.Update(DB, "Schema:" + S.getFullyQualifiedName() + ",STARTED");
                  }
                for (Table T : S._TableList)
                  {
                    if (T.getCompleted() == true)
                      continue;
                    long TableT0 = System.nanoTime();
                    long RowCount = T.getRowCount(C);

                    if (T.getStarted() == false)
                      {
                        StringBuilder Str = new StringBuilder();
                        String SchemaLink = "<A href=\"#" + S._Name + "\">" + S._Name + "</A>";
                        Str.append("<H2><A name=\"").append(T.getFullyQualifiedName()).append("\">Table <I>"+SchemaLink+"."+T.getName()).append("</I>")
                        .append("</H2><BR>\n");
                        for (int i = 0; i < T._ColumnList.size(); ++i)
                          {
                            if (i != 0)
                              Str.append(", ");
                            String FullColumnName = S._Name + "." + T._TableName + "." + T._ColumnList.get(i)._ColumnName;
                            Str.append("<A href=\"#").append(FullColumnName).append("\">").append(T._ColumnList.get(i)._ColumnName).append("</A>");
                          }
                        ;
                        Str.append("\n<P>" + T.getRulesData(C, RowCount, DB._TableRuleMap) + "</P>\n");
                        FH.UpdateResultsFile(T.getFileName(-1), Str.toString(), false, "Starting the Table file");
                        DBS.Update(DB, "Table:" + T.getFullyQualifiedName() + ",STARTED");
                      }

                    for (Column Col : T._ColumnList)
                      {
                        long ColumnT0 = System.nanoTime();

                        if (Col.getCompleted() == true)
                          continue;

                        if (Col.getStarted() == false)
                          {
                            if (RowCount > 0)
                              {
                                StringBuilder Str = new StringBuilder();
                                String SchemaLink = "<A href=\"#" + S._Name + "\">" + S._Name + "</A>";
                                String TableLink = "<A href=\"#" + S._Name + "." + T._TableName + "\">" + T._TableName + "</A>";
                                String ColFName = S._Name + "." + T._TableName + "." + Col._ColumnName; // Creating two hrefs - Schema and Table.
                                Str.append("<H3><A name=\"").append(ColFName).append("\"/>Column <I>").append(SchemaLink + "." + TableLink + "." + Col._ColumnName)
                                .append("</I></H3><BR>\n")
                                .append("Column Type: ").append(Col._TypeSql).append(" / ").append(Col._TypeName).append(" / ").append(Col._TildaType).append("<BR>\n")
                                .append("Column Size: ").append(Col._Size).append("<BR>\n")
                                .append("%%%COL_TIMING%%%\n")
                                .append("<BLOCKQUOTE>\n");

                                LOG.debug("Starting analysis for column "+Col.getFullyQualifiedName()+".");
                                Col.getColumnData(C, Str, RowCount, DB._TableRuleMap, DB._RuleMap);  
                                LOG.debug("Ended analysis for column "+Col.getFullyQualifiedName()+".");
                                
                                Str.append("</BLOCKQUOTE>\n");
                                String FullStr = Str.toString().replace("%%%COL_TIMING%%%", "Processed column in " + DurationUtil.printDuration(System.nanoTime() - ColumnT0) + "<BR>");
                                FH.UpdateResultsFile(Col.getFileName(-1), FullStr, false, "Creating the Column file");
                              }
                            DBS.Update(DB, "Column:" + Col.getFullyQualifiedName() + ",STARTED");
                          }
                        DBS.Update(DB, "Column:" + Col.getFullyQualifiedName() + ",COMPLETED");
                        LOG.info("Processed column in " + DurationUtil.printDurationSeconds(System.nanoTime() - ColumnT0));
                      }

                    FH.UpdateResultsFile(T.getFileName(-1), "<BR>Processed table in " + DurationUtil.printDuration(System.nanoTime() - TableT0) + "<BR><BLOCKQUOTE>", true, "Adding Table timing");
                    if (RowCount > 0)
                      for (Column Col : T._ColumnList)
                        {
                          FH.RollFile(Col.getFileName(-1), T.getFileName(-1), false);
                        }
                    FH.UpdateResultsFile(T.getFileName(-1), "</BLOCKQUOTE>", true, "Closing the Table file");
                    DBS.Update(DB, "Table:" + T.getFullyQualifiedName() + ",COMPLETED");
                    LOG.info("Processed table in " + DurationUtil.printDurationSeconds(System.nanoTime() - TableT0));
                  }

                long SchemaTotalNano = System.nanoTime() - SchemaT0;
                FH.UpdateResultsFile(S.getFileName(schemaFilePart), "Processed schema in " + DurationUtil.printDuration(SchemaTotalNano) + "<BR><BLOCKQUOTE>", true, "Adding Schema timing");
                if (S._TableList.isEmpty() == false)
                  for (int i = 0; i < S._TableList.size(); ++i)
                    {
                      Table T = S._TableList.get(i);
                      FH.RollFile(T.getFileName(-1), S.getFileName(schemaFilePart), false);
                      if (i < S._TableList.size() -1 && FH.fileLength(S.getFileName(schemaFilePart)) > 1000*1000*10)
                       {
                         FH.UpdateResultsFile(S.getFileName(schemaFilePart), "</BLOCKQUOTE></BODY></HTML>", true, "Closing the Schema file");
                         ++schemaFilePart;
                         StringBuilder Str = BuildSchemaFileStart(FH, S, schemaFilePart);
                         Str.append("Processed schema in " + DurationUtil.printDuration(SchemaTotalNano) + "<BR><BLOCKQUOTE>");
                         FH.UpdateResultsFile(S.getFileName(schemaFilePart), Str.toString(), false, "Adding Schema timing");
                       }
                    }
                FH.UpdateResultsFile(S.getFileName(schemaFilePart), "</BLOCKQUOTE></BODY></HTML>", true, "Closing the Schema file");
                DBS.Update(DB, "Schema:" + S.getFullyQualifiedName() + ",COMPLETED");
                LOG.info("Processed schemas in " + DurationUtil.printDurationSeconds(System.nanoTime() - SchemaT0));
              }
          }

        LOG.info("Processed Database in " + DurationUtil.printDurationSeconds(System.nanoTime() - T0) + "s");
        LOG.debug("End processing the db schemas.");
      }

    private static StringBuilder BuildSchemaFileStart(FileHelper FH, Schema S, int BuildSchemaFileStart)
    throws IOException
      {
        StringBuilder Str = new StringBuilder();
        Str.append("<HTML><HEAD>" + FH.getEmbeddedContents() + "</HEAD><BODY>\n")
        .append("<H1><A name=\"").append(S._Name).append("\"/>SCHEMA <I>").append(S._Name).append("</I> <SUP>PART "+BuildSchemaFileStart+"</SUP></H1><BR>\n")
        .append("<P>Number of tables : " + S._TableList.size() + "</P>\n");
        for (int i = 0; i < S._TableList.size(); ++i)
          {
            if (i != 0)
              Str.append(", ");
            String FullTableName = S._Name + "." + S._TableList.get(i)._TableName;
            Str.append("<A href=\"#").append(FullTableName).append("\">").append(FullTableName).append("</A>");
          }
        Str.append("<BR>\n");
        return Str;
      }
  }
