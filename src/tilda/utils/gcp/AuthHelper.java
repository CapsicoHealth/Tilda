/* ===========================================================================
 * Copyright (C) 2020 CapsicoHealth Inc.
 * ===========================================================================
 */
package tilda.utils.gcp;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.google.api.services.healthcare.v1.CloudHealthcareScopes;
import com.google.auth.oauth2.GoogleCredentials;

import tilda.utils.TextUtil;

public class AuthHelper
  {
    protected static final Logger LOG                   = LogManager.getLogger(AuthHelper.class.getName());

    private static final String _DEFAULT_ENV_VAR_NAME = "GCP_SERVICE_ACCOUNT_CREDENTIALS_PATH";

    /**
     * Given the environment variable 'GCP_SERVICE_ACCOUNT_CREDENTIALS_PATH', looks up the value which points to a path, and then
     * based on the project name, lookup the file "[GCP_SERVICE_ACCOUNT_CREDENTIALS_PATH]/[dataProjectName].xxx.key.[app].json".
     * 'xxx' can be anything (and is optional) but is generally the first few characters of the original key file. This is done
     * so different keys to the same project could be used in a team while keeping file names specific to the actual key file
     * generated by GCP.
     * 
     * @param dataProjectName the name of the project, which will be made lower-case for the filename matching
     * @param app the name of the app/service (e.g., bq, healthcare...), which will be made lower-case for the filename matching
     * @return A credentials object
     * @throws FileNotFoundException
     * @throws IOException
     */
    public static GoogleCredentials getCredentials(String dataProjectName, String appName)
    throws FileNotFoundException, IOException
      {
        return getCredentials(_DEFAULT_ENV_VAR_NAME, dataProjectName, appName);
      }

    /**
     * Given the environment variable passed in (default is 'GCP_SERVICE_ACCOUNT_CREDENTIALS_PATH'), looks up the value which points to a path, and then
     * based on the project name, lookup the file "[GCP_SERVICE_ACCOUNT_CREDENTIALS_PATH]/[dataProjectName].xxx.key.[app].json".
     * 'xxx' can be anything (and is optional) but is generally the first few characters of the original key file. This is done
     * so different keys to the same project could be used in a team while keeping file names specific to the actual key file
     * generated by GCP.
     * 
     * @param envVariable
     * @param dataProjectName the name of the project, which will be made lower-case for the filename matching
     * @param app the name of the app/service (e.g., bq, healthcare...), which will be made lower-case for the filename matching
     * @return A credentials object
     * @throws FileNotFoundException
     * @throws IOException
     */
    public static GoogleCredentials getCredentials(String envVariable, String dataProjectName, String appName)
    throws FileNotFoundException, IOException
      {
        String path = System.getenv(envVariable);
        if (TextUtil.isNullOrEmpty(path) == true)
          throw new FileNotFoundException("Cannot find the environment variable '" + envVariable + "' for the GCP credentials key file.");

        dataProjectName = dataProjectName.toLowerCase();
        appName = appName.toLowerCase();
        
        // We are looking for the bq key file, ad only one file
        File P = new File(path);
        File K = null;
        int i = 0;
        for (File F : P.listFiles())
          if (F.isFile() == true && F.getName().startsWith(dataProjectName + ".") == true && F.getName().endsWith(".key."+appName+".json") == true)
            {
              ++i;
              K = F;
            }
        if (i == 0)
          {
            LOG.error("The GCP credentials key file '" + dataProjectName + ".*.key."+appName+".json' not found in '" + path + "'.");
            throw new IOException("GCP credentials key file not found for dataProjectName='"+dataProjectName+" and appName='"+appName+"'.");
          }
        else if (i > 1)
          throw new IOException("There are more than 1 file matching the pattern '" + dataProjectName + ".*.key."+appName+".json' in '" + path + "' for GCP credentials key files: only 1 was expected.");

        try (FileInputStream in = new FileInputStream(K))
          {
            return GoogleCredentials.fromStream(in).createScoped(CloudHealthcareScopes.CLOUD_PLATFORM);
          }
      }


    public static String getAccessToken(GoogleCredentials creds)
    throws IOException
      {
        creds.refreshIfExpired();
        return creds.getAccessToken().getTokenValue();
      }

  }
