/* ===========================================================================
 * Copyright (C) 2020 CapsicoHealth Inc.
 * ===========================================================================
 */
package tilda.utils.gcp;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.google.api.services.healthcare.v1.CloudHealthcareScopes;
import com.google.auth.oauth2.GoogleCredentials;

import tilda.utils.FileUtil;
import tilda.utils.TextUtil;

public class AuthHelper
  {
    protected static final Logger LOG                   = LogManager.getLogger(AuthHelper.class.getName());

    /**
     * Given the default environment variable defined in {@link tilda.utils.FileUtil#_DEFAULT_ENV_VAR_NAME},
     * looks up the value which points to a path, and then based on the project name, lookup the file
     * "[SERVICE_ACCOUNTS_CREDENTIALS_PATH]/[dataProjectName].xxx.key.[app].json". 'xxx' can be anything 
     * (and is optional) but is generally the first few characters of the original key file. This is done
     * so different keys to the same project could be used in a team while keeping file names specific to 
     * the actual key file generated by GCP.
     * 
     * @param dataProjectName the name of the project, which will be made lower-case for the filename matching
     * @param app the name of the app/service (e.g., bq, healthcare...), which will be made lower-case for the filename matching
     * @return A credentials object
     * @throws FileNotFoundException
     * @throws IOException
     */
    public static GoogleCredentials getCredentials(String dataProjectName, String appName)
    throws FileNotFoundException, IOException
      {
        return getCredentials(FileUtil._DEFAULT_ENV_VAR_NAME, dataProjectName, appName);
      }

    /**
     * Given the environment variable name passed in (default is {@link tilda.utils.FileUtil#_DEFAULT_ENV_VAR_NAME}),
     * looks up the value which points to a path, and then based on the project name, lookup the file
     * "[SERVICE_ACCOUNTS_CREDENTIALS_PATH]/[dataProjectName].xxx.key.[app].json". 'xxx' can be anything 
     * (and is optional) but is generally the first few characters of the original key file. This is done
     * so different keys to the same project could be used in a team while keeping file names specific to 
     * the actual key file generated by GCP.
     * 
     * @param envVariable
     * @param dataProjectName the name of the project, which will be made lower-case for the filename matching
     * @param app the name of the app/service (e.g., bq, healthcare...), which will be made lower-case for the filename matching
     * @return A credentials object
     * @throws FileNotFoundException
     * @throws IOException
     */
    public static GoogleCredentials getCredentials(String envVariable, String dataProjectName, String appName)
    throws FileNotFoundException, IOException
      {
        File K = FileUtil.getKeyFile(envVariable, dataProjectName, appName);
        try (FileInputStream in = new FileInputStream(K))
          {
            return GoogleCredentials.fromStream(in).createScoped(CloudHealthcareScopes.CLOUD_PLATFORM);
          }
      }

    public static String getAccessToken(GoogleCredentials creds)
    throws IOException
      {
        creds.refreshIfExpired();
        return creds.getAccessToken().getTokenValue();
      }

  }
